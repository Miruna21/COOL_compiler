sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(data, text) ::= <<
    .data
<dataGlobals()>
<data>

    .globl  heap_start
heap_start:
    .word   0

    .text
<textGlobals()>
<text>
>>

dataGlobals() ::= <<
    .align  2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const0
    .globl  bool_const1
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag
>>

tags(int_index, string_index, bool_index) ::= <<
_int_tag:
    .word   <int_index>
_string_tag:
    .word   <string_index>
_bool_tag:
    .word   <bool_index>
>>

str_const(index, class_index, dim, len_obj, str) ::= <<
str_const<index>:
    .word   <class_index>
    .word   <dim>
    .word   String_dispTab
    .word   <len_obj>
    .asciiz <str>
    .align  2
>>

int_const(index, class_index, value) ::= <<
int_const<index>:
    .word   <class_index>
    .word   4
    .word   Int_dispTab
    .word   <value>
>>

bool_const(index, class_index, value) ::= <<
bool_const<index>:
    .word   <class_index>
    .word   4
    .word   Bool_dispTab
    .word   <value>
>>

nameTab(name_constant) ::= <<
class_nameTab:
<name_constant; separator="\n">
>>

objTab(prot_init) ::= <<
class_objTab:
<prot_init; separator="\n">
>>

str_attribute(len, str) ::= <<
    .word   <len>
    .asciiz <str>
    .align  2
>>

word(value) ::= <<
    .word   <value>
>>

init_constant(value) ::= <<
    la      $a0 <value>
>>

init_address(value) ::= <<
    li      $a0 <value>
>>

protObj(class, index, dim, disp_ptr, attributes) ::= <<
<class>_protObj:
    .word   <index>
    .word   <dim>
    .word   <disp_ptr>
<if(attributes)><attributes><else><endif>
>>

dispTab(class, methods) ::= <<
<class>_dispTab:
<methods>
>>

textGlobals() ::= <<
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main
>>

initMethod(class, parent_init_method, attr_init_exprs) ::= <<
<class>_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    <if(parent_init_method)>jal     <parent_init_method><else><endif>
<if(attr_init_exprs)><attr_init_exprs><else><endif>
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
>>

methodDef(class, method, body, offset) ::= <<
<class>.<method>:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<body>
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp <offset>
    jr      $ra
>>

literal(value) ::= <<
    la      $a0 <value>
>>

attr_get(offset) ::= <<
    lw      $a0 <offset>($s0)
>>

attr_set(offset) ::= <<
    sw      $a0 <offset>($s0)
>>

self_get() ::= <<
    move    $a0 $s0
>>

formal_get(offset) ::= <<
    lw      $a0 <offset>($fp)
>>

formal_set(offset) ::= <<
    sw      $a0 <offset>($fp)
>>

arg(e) ::= <<
<e>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
>>

dispatch_abort_call(file_name, line_number) ::= <<
    la      $a0 <file_name>
    li      $t1 <line_number>
    jal     _dispatch_abort
>>

simple_dispatch(args, index, file_name, line_number, method_offset) ::= <<
<args>
    move    $a0 $s0
    bnez    $a0 dispatch<index>   # dispatch object in $a0
<dispatch_abort_call(file_name, line_number)>
dispatch<index>:
    lw      $t1 8($a0)   # dispatch table
    lw      $t1 <method_offset>($t1)   # method offset
    jalr    $t1
>>

dispatch(e, args, index, file_name, line_number, method_offset) ::= <<
<args>
<e>
    bnez    $a0 dispatch<index>     # dispatch object in $a0
<dispatch_abort_call(file_name, line_number)>
dispatch<index>:
    lw      $t1 8($a0)   # dispatch table
    lw      $t1 <method_offset>($t1)   # method offset
    jalr    $t1
>>

at_dispatch(e, args, index, class, file_name, line_number, method_offset) ::= <<
<args>
<e>
    bnez    $a0 dispatch<index>     # dispatch object in $a0
<dispatch_abort_call(file_name, line_number)>
dispatch<index>:
    la      $t1 <class>_dispTab   # dispatch table
    lw      $t1 <method_offset>($t1)   # method offset
    jalr    $t1
>>


let(init_expr, body, offset) ::= <<
    addiu   $sp $sp -4   # locals alloc
    <init_expr>
    sw      $a0 -<offset>($fp)
    <body>
    addiu   $sp $sp 4    # locals free
>>

new_class(class) ::= <<
    la      $a0 <class>_protObj
    jal     Object.copy
    jal     <class>_init
>>

new_self_type() ::= <<
    la      $t1 class_objTab
    lw      $t2 0($s0)          # class tag
    sll     $t2 $t2 3           # *8
    addu    $t1 $t1 $t2         # class_objTab + 8 * tag
    sw      $t1 0($sp)
    addiu   $sp $sp -4
    lw      $a0 0($t1)          # _protObj
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 4($t1)          # _init
    jalr    $t1
>>

if(e1, e2, e3, index) ::= <<
<e1>
    lw      $t1 12($a0)     # bool slot
    beqz    $t1 true_branch<index>
false_branch<index>:
<e2>
    b       end_if<index>
true_branch<index>:
<e3>
end_if<index>:

>>

isvoid(e, index, false_const, true_const) ::= <<
<e>
    move    $t1 $a0
    la      $a0 <true_const>
    beqz    $t1 isvoid<index>
    la      $a0 <false_const>
isvoid<index>:
>>

not(e, true_const, false_const, index) ::= <<
<e>
    lw      $t1 12($a0)     # bool slot
    beqz    $t1 false_to_true<index>
true_to_false<index>:
    la      $a0 <false_const>
    b end_not<index>
false_to_true<index>:
    la      $a0 <true_const>
end_not<index>:

>>

equality(e1, e2, true_const, false_const, index) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    move    $t2 $a0
    la      $a0 <true_const>
    beq     $t1 $t2 eq<index>
    la      $a1 <false_const>
    jal     equality_test
eq<index>:
>>